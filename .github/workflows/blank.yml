 # This is a basic workflow to help you get started with Actions

name: CI
env:
  # The name of the main module repository
  main_project_module: app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world with secret = ${{secrets.SECRET}}!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project with var = ${{vars.VAR_NAME}}.

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

        # Create APK Debug
      - name: Build apk debug project (APK) - app module
        run: ./gradlew assembleDebug

      - name: Set debug APK path to env
        run: |
          DEBUG_APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk")
          echo "DEBUG_APK_PATH=$DEBUG_APK_PATH" >> $GITHUB_ENV

      - name : Retrieve Version
        run: |
          echo "::set-output name=VERSION_NAME::$(${{github.workspace}}/gradlew -q printVersionName)"
        id: android_version

      - name: Get version
        run: |
          echo "VER=${{steps.android_version.outputs.VERSION_NAME}}" >> $GITHUB_ENV

      - name: Generate changelog
        id: generate_changelog # Важно указать идентификатор, чтобы обращаться к outputs
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude=${{ env.VER }})
          echo "Предыдущий тег: $PREV_TAG"
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"* %s (%h)" --reverse)
          echo "Список изменений:\n$CHANGELOG"
          # Устанавливаем outputs для шага
          echo "::set-output name=changelog::$CHANGELOG"


      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VER }}
          release_name: Release ${{ env.VER }}
          body: |
            Full Changelog: https://github.com/ChD1/pokerEYE/commits/${{ env.VER }}
            Changelog:
              ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Release debug APK
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEBUG_APK_PATH }}
          asset_name: Debug_${{ env.VER }}.apk
          asset_content_type: application/zip
